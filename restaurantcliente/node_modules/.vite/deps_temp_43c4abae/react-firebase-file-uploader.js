import {
  require_react
} from "./chunk-YSDLPTTY.js";
import {
  __commonJS
} from "./chunk-ZS7NZCD4.js";

// node_modules/uuid/lib/rng-browser.js
var require_rng_browser = __commonJS({
  "node_modules/uuid/lib/rng-browser.js"(exports, module) {
    var getRandomValues = typeof crypto != "undefined" && crypto.getRandomValues && crypto.getRandomValues.bind(crypto) || typeof msCrypto != "undefined" && typeof window.msCrypto.getRandomValues == "function" && msCrypto.getRandomValues.bind(msCrypto);
    if (getRandomValues) {
      rnds8 = new Uint8Array(16);
      module.exports = function whatwgRNG() {
        getRandomValues(rnds8);
        return rnds8;
      };
    } else {
      rnds = new Array(16);
      module.exports = function mathRNG() {
        for (var i = 0, r; i < 16; i++) {
          if ((i & 3) === 0)
            r = Math.random() * 4294967296;
          rnds[i] = r >>> ((i & 3) << 3) & 255;
        }
        return rnds;
      };
    }
    var rnds8;
    var rnds;
  }
});

// node_modules/uuid/lib/bytesToUuid.js
var require_bytesToUuid = __commonJS({
  "node_modules/uuid/lib/bytesToUuid.js"(exports, module) {
    var byteToHex = [];
    for (i = 0; i < 256; ++i) {
      byteToHex[i] = (i + 256).toString(16).substr(1);
    }
    var i;
    function bytesToUuid(buf, offset) {
      var i2 = offset || 0;
      var bth = byteToHex;
      return [
        bth[buf[i2++]],
        bth[buf[i2++]],
        bth[buf[i2++]],
        bth[buf[i2++]],
        "-",
        bth[buf[i2++]],
        bth[buf[i2++]],
        "-",
        bth[buf[i2++]],
        bth[buf[i2++]],
        "-",
        bth[buf[i2++]],
        bth[buf[i2++]],
        "-",
        bth[buf[i2++]],
        bth[buf[i2++]],
        bth[buf[i2++]],
        bth[buf[i2++]],
        bth[buf[i2++]],
        bth[buf[i2++]]
      ].join("");
    }
    module.exports = bytesToUuid;
  }
});

// node_modules/uuid/v4.js
var require_v4 = __commonJS({
  "node_modules/uuid/v4.js"(exports, module) {
    var rng = require_rng_browser();
    var bytesToUuid = require_bytesToUuid();
    function v4(options, buf, offset) {
      var i = buf && offset || 0;
      if (typeof options == "string") {
        buf = options === "binary" ? new Array(16) : null;
        options = null;
      }
      options = options || {};
      var rnds = options.random || (options.rng || rng)();
      rnds[6] = rnds[6] & 15 | 64;
      rnds[8] = rnds[8] & 63 | 128;
      if (buf) {
        for (var ii = 0; ii < 16; ++ii) {
          buf[i + ii] = rnds[ii];
        }
      }
      return buf || bytesToUuid(rnds);
    }
    module.exports = v4;
  }
});

// node_modules/react-firebase-file-uploader/lib/utils/polyfill.js
var require_polyfill = __commonJS({
  "node_modules/react-firebase-file-uploader/lib/utils/polyfill.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = addToBlobPolyfill;
    function addToBlobPolyfill() {
      Object.defineProperty(HTMLCanvasElement.prototype, "toBlob", {
        value: function value(callback, type, quality) {
          var binStr = atob(this.toDataURL(type, quality).split(",")[1]), len = binStr.length, arr = new Uint8Array(len);
          for (var i = 0; i < len; i++) {
            arr[i] = binStr.charCodeAt(i);
          }
          callback(new Blob([arr], { type: type || "image/png" }));
        }
      });
    }
  }
});

// node_modules/react-firebase-file-uploader/lib/utils/image.js
var require_image = __commonJS({
  "node_modules/react-firebase-file-uploader/lib/utils/image.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = resizeAndCropImage;
    var _polyfill = require_polyfill();
    var _polyfill2 = _interopRequireDefault(_polyfill);
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    function resizeAndCropImage(file, w, h) {
      if (!HTMLCanvasElement.prototype.toBlob) {
        (0, _polyfill2.default)();
      }
      return new Promise(function(resolve, reject) {
        var reader = new FileReader();
        reader.onload = function(readerEvent) {
          var image = new Image();
          image.onload = function(imageEvent) {
            var canvas = document.createElement("canvas");
            var maxWidth = w || image.width;
            var maxHeight = h || image.height;
            canvas.width = maxWidth;
            canvas.height = maxHeight;
            var horizontalScale = maxWidth / image.width;
            var verticalScale = maxHeight / image.height;
            var scale = Math.max(horizontalScale, verticalScale);
            var width = scale * image.width, height = scale * image.height;
            var verticalOffset = Math.min((maxHeight - height) / 2, 0);
            var horizontalOffset = Math.min((maxWidth - width) / 2, 0);
            var context = canvas.getContext("2d");
            if (!context) {
              return reject("Could not get the context of the canvas element");
            }
            context.drawImage(image, horizontalOffset, verticalOffset, width, height);
            canvas.toBlob(function(blob) {
              resolve(blob);
            }, file.type);
          };
          image.src = readerEvent.target.result;
        };
        reader.readAsDataURL(file);
      });
    }
  }
});

// node_modules/react-firebase-file-uploader/lib/index.js
var require_lib = __commonJS({
  "node_modules/react-firebase-file-uploader/lib/index.js"(exports) {
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var _extends = Object.assign || function(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = arguments[i];
        for (var key in source) {
          if (Object.prototype.hasOwnProperty.call(source, key)) {
            target[key] = source[key];
          }
        }
      }
      return target;
    };
    var _createClass = /* @__PURE__ */ function() {
      function defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
          var descriptor = props[i];
          descriptor.enumerable = descriptor.enumerable || false;
          descriptor.configurable = true;
          if ("value" in descriptor)
            descriptor.writable = true;
          Object.defineProperty(target, descriptor.key, descriptor);
        }
      }
      return function(Constructor, protoProps, staticProps) {
        if (protoProps)
          defineProperties(Constructor.prototype, protoProps);
        if (staticProps)
          defineProperties(Constructor, staticProps);
        return Constructor;
      };
    }();
    var _react = require_react();
    var _react2 = _interopRequireDefault(_react);
    var _v = require_v4();
    var _v2 = _interopRequireDefault(_v);
    var _image = require_image();
    var _image2 = _interopRequireDefault(_image);
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    function _objectWithoutProperties(obj, keys) {
      var target = {};
      for (var i in obj) {
        if (keys.indexOf(i) >= 0)
          continue;
        if (!Object.prototype.hasOwnProperty.call(obj, i))
          continue;
        target[i] = obj[i];
      }
      return target;
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _possibleConstructorReturn(self, call) {
      if (!self) {
        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
      }
      return call && (typeof call === "object" || typeof call === "function") ? call : self;
    }
    function _inherits(subClass, superClass) {
      if (typeof superClass !== "function" && superClass !== null) {
        throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
      }
      subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });
      if (superClass)
        Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
    }
    var generateRandomFilename = function generateRandomFilename2() {
      return (0, _v2.default)();
    };
    function extractExtension(filename) {
      var ext = /(?:\.([^.]+))?$/.exec(filename);
      if (ext != null && ext[0] != null) {
        return ext[0];
      } else {
        return "";
      }
    }
    var FirebaseFileUploader = function(_Component) {
      _inherits(FirebaseFileUploader2, _Component);
      function FirebaseFileUploader2() {
        var _ref;
        var _temp, _this, _ret;
        _classCallCheck(this, FirebaseFileUploader2);
        for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }
        return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = FirebaseFileUploader2.__proto__ || Object.getPrototypeOf(FirebaseFileUploader2)).call.apply(_ref, [this].concat(args))), _this), _this.uploadTasks = [], _this.handleFileSelection = function(event) {
          var files = event.target.files;
          for (var i = 0; i < files.length; i++) {
            _this.startUpload(files[i]);
          }
        }, _temp), _possibleConstructorReturn(_this, _ret);
      }
      _createClass(FirebaseFileUploader2, [{
        key: "componentWillUnmount",
        // Cancel all running uploads before unmount
        value: function componentWillUnmount() {
          this.cancelRunningUploads();
        }
      }, {
        key: "cancelRunningUploads",
        value: function cancelRunningUploads() {
          while (this.uploadTasks.length > 0) {
            var _task = this.uploadTasks.pop();
            if (_task.snapshot.state === "running") {
              _task.cancel();
            }
          }
        }
        // Remove a specific task from the uploadTasks
      }, {
        key: "removeTask",
        value: function removeTask(task) {
          for (var i = 0; i < this.uploadTasks.length; i++) {
            if (this.uploadTasks[i] === task) {
              this.uploadTasks.splice(i, 1);
              return;
            }
          }
        }
      }, {
        key: "startUpload",
        value: function startUpload(file) {
          var _this2 = this;
          var _props = this.props, onUploadStart = _props.onUploadStart, onProgress = _props.onProgress, onUploadError = _props.onUploadError, onUploadSuccess = _props.onUploadSuccess, storageRef = _props.storageRef, metadata = _props.metadata, randomizeFilename = _props.randomizeFilename, filename = _props.filename;
          var filenameToUse = void 0;
          if (filename) {
            filenameToUse = typeof filename === "function" ? filename(file) : filename;
          } else {
            filenameToUse = randomizeFilename ? generateRandomFilename() : file.name;
          }
          if (!extractExtension(filenameToUse)) {
            filenameToUse += extractExtension(file.name);
          }
          Promise.resolve().then(function() {
            var shouldResize = file.type.match(/image.*/) && (_this2.props.maxWidth || _this2.props.maxHeight);
            if (shouldResize) {
              return (0, _image2.default)(file, _this2.props.maxWidth, _this2.props.maxHeight);
            }
            return file;
          }).then(function(file2) {
            var task = storageRef.child(filenameToUse).put(file2, metadata);
            if (onUploadStart) {
              onUploadStart(file2, task);
            }
            task.on("state_changed", function(snapshot) {
              return onProgress && onProgress(Math.round(100 * snapshot.bytesTransferred / snapshot.totalBytes), task);
            }, function(error) {
              return onUploadError && onUploadError(error, task);
            }, function() {
              _this2.removeTask(task);
              return onUploadSuccess && onUploadSuccess(task.snapshot.metadata.name, task);
            });
            _this2.uploadTasks.push(task);
          });
        }
      }, {
        key: "render",
        value: function render() {
          var _props2 = this.props, storageRef = _props2.storageRef, onUploadStart = _props2.onUploadStart, onProgress = _props2.onProgress, onUploadSuccess = _props2.onUploadSuccess, onUploadError = _props2.onUploadError, randomizeFilename = _props2.randomizeFilename, metadata = _props2.metadata, filename = _props2.filename, maxWidth = _props2.maxWidth, maxHeight = _props2.maxHeight, hidden = _props2.hidden, _props2$as = _props2.as, Input = _props2$as === void 0 ? "input" : _props2$as, props = _objectWithoutProperties(_props2, ["storageRef", "onUploadStart", "onProgress", "onUploadSuccess", "onUploadError", "randomizeFilename", "metadata", "filename", "maxWidth", "maxHeight", "hidden", "as"]);
          var inputStyle = hidden ? Object.assign({}, props.style, {
            width: "0.1px",
            height: "0.1px",
            opacity: 0,
            overflow: "hidden",
            position: "absolute",
            zIndex: -1
          }) : props.style;
          return _react2.default.createElement(Input, _extends({
            type: "file",
            onChange: this.handleFileSelection
          }, props, {
            style: inputStyle
          }));
        }
      }]);
      return FirebaseFileUploader2;
    }(_react.Component);
    exports.default = FirebaseFileUploader;
  }
});
export default require_lib();
//# sourceMappingURL=react-firebase-file-uploader.js.map
